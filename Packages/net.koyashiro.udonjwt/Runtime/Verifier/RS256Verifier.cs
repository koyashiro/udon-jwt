using UnityEngine;
using UdonSharp;
using Koyashiro.UdonJwt.Numerics;

namespace Koyashiro.UdonJwt.Verifier
{
    [AddComponentMenu("")]
    public class RS256Verifier : UdonSharpBehaviour
    {
        [SerializeField]
        private ModPowCalculator _modPowCalculator;

        [SerializeField, HideInInspector]
        private int _e;

        [SerializeField, HideInInspector]
        private uint[] _n;

        [SerializeField, HideInInspector]
        private uint[] _nInverse;

        [SerializeField, HideInInspector]
        private int _fixedPointLength;

        private string _headerBase64;
        private string _payloadBase64;
        private UdonSharpBehaviour _callbackThis;
        private string _callbackEventName;

        private bool _result;

        public int E => _e;
        public uint[] N => _n;
        public uint[] NInverse => _nInverse;
        public int FixedPointLength => _fixedPointLength;
        public bool Result => _result;

        public void SetPublicKey(int e, uint[] n, uint[] nInverse, int fixedPointLength)
        {
            _e = e;
            _n = n;
            _nInverse = nInverse;
            _fixedPointLength = fixedPointLength;
        }

        public void Verify(string headerBase64, string payloadBase64, byte[] signature, UdonSharpBehaviour callbackThis, string callbackEventName)
        {
            _callbackThis = callbackThis;
            _callbackEventName = callbackEventName;

            // TODO: token to hash
            // var hash = new uint[] { };

            signature = new byte[] {
                0x73, 0xf4, 0xc3, 0x87, 0xd3, 0xbc, 0xe4, 0x71, 0x4e, 0x02, 0xc9, 0x1a, 0xd9, 0xc3, 0x3d, 0x90,
                0xdf, 0x13, 0x1b, 0x08, 0xf6, 0x20, 0x99, 0x2f, 0x3e, 0xdb, 0x84, 0x73, 0x59, 0x01, 0x91, 0x93,
                0x3d, 0x65, 0x4f, 0x94, 0x8b, 0x2c, 0xa9, 0x7e, 0xeb, 0x33, 0x9c, 0xa9, 0x4f, 0xaa, 0xec, 0x14,
                0x50, 0x0d, 0x34, 0x20, 0xa7, 0xe1, 0x47, 0x57, 0x59, 0x0c, 0xca, 0xc6, 0xfd, 0xc3, 0x4b, 0x8c,
                0xf3, 0x99, 0xee, 0x87, 0x0f, 0x64, 0xbf, 0x1b, 0x5a, 0x84, 0xf6, 0x23, 0x68, 0x02, 0x6f, 0xe1,
                0xcd, 0x1b, 0x4d, 0x1d, 0x35, 0xfa, 0xb8, 0xe1, 0xa1, 0x7e, 0xc2, 0xca, 0x26, 0x48, 0xd9, 0xf6,
                0x24, 0xbe, 0xa6, 0xc8, 0x99, 0xa7, 0x21, 0x66, 0xcf, 0x80, 0xd3, 0xf9, 0x58, 0xe0, 0x9c, 0x26,
                0x2a, 0x5f, 0xb3, 0x13, 0x65, 0xa2, 0xe7, 0x4b, 0x18, 0x70, 0x13, 0x2f, 0x03, 0x0c, 0xe6, 0x21,
                0x98, 0xef, 0x46, 0x01, 0x18, 0x5e, 0x6e, 0xf4, 0x3f, 0xd9, 0xcb, 0xbb, 0x13, 0x4d, 0xb0, 0x49,
                0xcd, 0x50, 0x1e, 0x6c, 0x2a, 0x2c, 0xd7, 0x38, 0x24, 0x50, 0x8b, 0x15, 0xc4, 0xf3, 0xb0, 0x3f,
                0x6c, 0xd1, 0xa6, 0xd3, 0x91, 0x39, 0xf2, 0x82, 0x58, 0x1d, 0x10, 0x0a, 0x8e, 0x7b, 0xeb, 0x29,
                0x9b, 0xe3, 0x5f, 0xcc, 0x4c, 0xef, 0xe4, 0x57, 0x9f, 0x55, 0x42, 0xac, 0x24, 0x82, 0x4d, 0x4f,
                0x2c, 0xd0, 0xec, 0x97, 0x4d, 0x81, 0xb1, 0xa3, 0x1e, 0xf4, 0x24, 0x2b, 0x4f, 0x1d, 0x3f, 0x35,
                0x4b, 0x59, 0x5a, 0x8c, 0x7b, 0xb0, 0xf7, 0xb4, 0xae, 0xc9, 0xd5, 0x0c, 0xbd, 0xa6, 0x9b, 0x8c,
                0x3c, 0xbc, 0xa2, 0xa0, 0x69, 0xe5, 0xdf, 0x7d, 0xdc, 0xcd, 0xc8, 0x48, 0x60, 0x5c, 0x59, 0xba,
                0xfd, 0x48, 0xca, 0xc9, 0xb5, 0xca, 0xfc, 0x17, 0xbb, 0xbb, 0xc4, 0x1d, 0x74, 0x93, 0x4d, 0xfa
            };

            _modPowCalculator.Calculate(UnsignedBigInteger.FromBytes(signature), _e, _n, _nInverse, _fixedPointLength, this, nameof(_Verify));
        }

        public void _Verify()
        {
            var result = UnsignedBigInteger.ToBytes(_modPowCalculator.Result);

            var hash = new byte[] {
                0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
                0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x30, 0x31, 0x30,
                0x0d, 0x06, 0x09, 0x60, 0x86, 0x48, 0x01, 0x65, 0x03, 0x04, 0x02, 0x01, 0x05, 0x00, 0x04, 0x20,
                0x1a, 0xb1, 0xa2, 0xbb, 0x85, 0x02, 0x82, 0x0a, 0x83, 0x88, 0x1a, 0x5b, 0x66, 0x91, 0x0b, 0x81,
                0x91, 0x21, 0xba, 0xfe, 0x33, 0x6d, 0x76, 0x37, 0x46, 0x37, 0xaa, 0x4e, 0xa7, 0xba, 0x26, 0x16
            };

            for (var i = 0; i < hash.Length; i++)
            {
                if (hash[i] != result[i])
                {
                    _result = false;
                    _callbackThis.SendCustomEventDelayedFrames(_callbackEventName, 1);
                    return;
                }
            }

            _result = true;
            _callbackThis.SendCustomEventDelayedFrames(_callbackEventName, 1);
        }
    }
}
